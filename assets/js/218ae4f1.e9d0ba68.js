"use strict";(self.webpackChunkglobalpass_docs=self.webpackChunkglobalpass_docs||[]).push([[712],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(k,l(l({ref:n},p),{},{components:t})):a.createElement(k,l({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={hide_table_of_contents:!0},l="Flutter",i={unversionedId:"ios-sdk/flutter",id:"ios-sdk/flutter",title:"Flutter",description:"Latest GlobalPass iOS SDK version: 1.11",source:"@site/docs/ios-sdk/flutter.md",sourceDirName:"ios-sdk",slug:"/ios-sdk/flutter",permalink:"/ios-sdk/flutter",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"iosSdkSidebar",previous:{title:"iOS",permalink:"/category/ios"},next:{title:"Native",permalink:"/ios-sdk/native/"}},s={},c=[{value:"1. Manual installation step-by-step",id:"1-manual-installation-step-by-step",level:2},{value:"a. Clone the repository",id:"a-clone-the-repository",level:3},{value:"b. Open Terminal on Flutter project and run the following command:",id:"b-open-terminal-on-flutter-project-and-run-the-following-command",level:3},{value:"c. Change current Terminal folder to <code>ios</code> by running the following command:",id:"c-change-current-terminal-folder-to-ios-by-running-the-following-command",level:3},{value:"d. Then run the following commands:",id:"d-then-run-the-following-commands",level:3},{value:"e. Open Flutter project&#39;s iOS <code>.xcworkspace</code> file",id:"e-open-flutter-projects-ios-xcworkspace-file",level:3},{value:"f. Select context menu on <code>Frameworks</code> folder and select <code>Add files to \u2026</code>",id:"f-select-context-menu-on-frameworks-folder-and-select-add-files-to-",level:3},{value:"g. Choose the <code>GlobalPass.xcframework</code> folder and click <code>Add</code>",id:"g-choose-the-globalpassxcframework-folder-and-click-add",level:3},{value:"h. You can now build the project",id:"h-you-can-now-build-the-project",level:3},{value:"2. CocoaPods installation step-by-step",id:"2-cocoapods-installation-step-by-step",level:2},{value:"a. Edit Podfile",id:"a-edit-podfile",level:3},{value:"b. Install Cocoa Pods in Terminal",id:"b-install-cocoa-pods-in-terminal",level:3},{value:"Project setup",id:"project-setup",level:2},{value:"Paste these lines to it <code>Info.plist</code>",id:"paste-these-lines-to-it-infoplist",level:3},{value:"iOS side",id:"ios-side",level:2},{value:"Flutter side",id:"flutter-side",level:2},{value:"Localisation",id:"localisation",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flutter"},"Flutter"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Latest GlobalPass iOS SDK version: ",(0,r.kt)("strong",{parentName:"p"},"1.11"))),(0,r.kt)("h2",{id:"1-manual-installation-step-by-step"},"1. Manual installation step-by-step"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can follow the manual installation steps below or use CocoaPods to install dependencies. For the latter, see ",(0,r.kt)("a",{parentName:"p",href:"#2-cocoapods-installation-step-by-step"},"CocoaPods installation step-by-step"),".")),(0,r.kt)("h3",{id:"a-clone-the-repository"},"a. Clone the repository"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://isun-ag@dev.azure.com/isun-ag/GlobalPassApp-Public/_git/GlobalPassApp-sdk-ios-binaries"},"https://isun-ag@dev.azure.com/isun-ag/GlobalPassApp-Public/","_","git/GlobalPassApp-sdk-ios-binaries")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The cloned repository contains ",(0,r.kt)("inlineCode",{parentName:"p"},"GlobalPass.xcframework")," folder which should be copied to ",(0,r.kt)("strong",{parentName:"p"},"Flutter")," project's ",(0,r.kt)("inlineCode",{parentName:"p"},"ios")," folder.")),(0,r.kt)("h3",{id:"b-open-terminal-on-flutter-project-and-run-the-following-command"},"b. Open Terminal on Flutter project and run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ flutter pub get\n")),(0,r.kt)("h3",{id:"c-change-current-terminal-folder-to-ios-by-running-the-following-command"},"c. Change current Terminal folder to ",(0,r.kt)("inlineCode",{parentName:"h3"},"ios")," by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ios\n")),(0,r.kt)("h3",{id:"d-then-run-the-following-commands"},"d. Then run the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ pod init\n$ pod install\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Make sure that you have Podfile file on your ",(0,r.kt)("inlineCode",{parentName:"p"},"ios")," folder.")),(0,r.kt)("h3",{id:"e-open-flutter-projects-ios-xcworkspace-file"},"e. Open Flutter project's iOS ",(0,r.kt)("inlineCode",{parentName:"h3"},".xcworkspace")," file"),(0,r.kt)("h3",{id:"f-select-context-menu-on-frameworks-folder-and-select-add-files-to-"},"f. Select context menu on ",(0,r.kt)("inlineCode",{parentName:"h3"},"Frameworks")," folder and select ",(0,r.kt)("inlineCode",{parentName:"h3"},"Add files to \u2026")),(0,r.kt)("h3",{id:"g-choose-the-globalpassxcframework-folder-and-click-add"},"g. Choose the ",(0,r.kt)("inlineCode",{parentName:"h3"},"GlobalPass.xcframework")," folder and click ",(0,r.kt)("inlineCode",{parentName:"h3"},"Add")),(0,r.kt)("h3",{id:"h-you-can-now-build-the-project"},"h. You can now build the project"),(0,r.kt)("h2",{id:"2-cocoapods-installation-step-by-step"},"2. CocoaPods installation step-by-step"),(0,r.kt)("h3",{id:"a-edit-podfile"},"a. Edit Podfile"),(0,r.kt)("p",null,"Add plugin to the beginning of Podfile:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"plugin 'cocoapods-azure-universal-packages', {\n  :organization => 'https://dev.azure.com/isun-ag'\n}\n")),(0,r.kt)("p",null,"Provide ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," urls:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"source 'https://cdn.cocoapods.org'\nsource 'https://dev.azure.com/isun-ag/GlobalPassApp-Public/_git/GlobalPassApp-sdk-ios-private-specs'\n")),(0,r.kt)("p",null,"and required dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"pod 'GlobalPass', '~> 1.11'\npod 'FaceTecSDK', :http => 'https://dev.azure.com/isun-ag/368936e7-5cb5-4092-96c5-fe9942e2c3e1/_apis/packaging/feeds/FaceTecSDK/upack/packages/facetecsdk/versions/0.0.2'\n")),(0,r.kt)("h3",{id:"b-install-cocoa-pods-in-terminal"},"b. Install Cocoa Pods in Terminal"),(0,r.kt)("p",null,"Run the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ brew update && brew install azure-cli\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ az devops login\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When asked for credentials, put the ",(0,r.kt)("strong",{parentName:"p"},"repository access token")," you were provided by GlobalPass.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ gem install cocoapods-azure-universal-packages\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ pod install\n")),(0,r.kt)("h2",{id:"project-setup"},"Project setup"),(0,r.kt)("h3",{id:"paste-these-lines-to-it-infoplist"},"Paste these lines to it ",(0,r.kt)("inlineCode",{parentName:"h3"},"Info.plist")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="Info.plist"',title:'"Info.plist"'},"<key>NFCReaderUsageDescription</key>\n<string>Provide you description here</string>\n<key>NSCameraUsageDescription</key>\n<string>Provide you description here</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Provide you description here</string>\n<key>com.apple.developer.nfc.readersession.iso7816.select-identifiers</key>\n<array>\n<string>A0000002471001</string>\n<string>A0000002472001</string>\n<string>00000000000000</string>\n</array>\n")),(0,r.kt)("admonition",{title:"important",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Please change the descriptions under ",(0,r.kt)("inlineCode",{parentName:"p"},"NFCReaderUsageDescription"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NSCameraUsageDescription")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NSLocationWhenInUseUsageDescription")," in the file above. This is important to pass ",(0,r.kt)("strong",{parentName:"p"},"App Store")," review process for your application.")),(0,r.kt)("h2",{id:"ios-side"},"iOS side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import UIKit\nimport Flutter\nimport GlobalPass\n\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n    override func application(\n        _ application: UIApplication,\n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n    ) -> Bool {\n\n      let controller = (window?.rootViewController as! FlutterViewController)\n      let methodChannel =\n      FlutterMethodChannel(name: "global_pass_plugin/kyc_channel", binaryMessenger: controller.binaryMessenger)\n      methodChannel\n          .setMethodCallHandler { (call: FlutterMethodCall, result: @escaping FlutterResult) -> Void in\n              let arg = call.arguments as? Dictionary<String, Any>\n              let token: String = arg?["token"] as? String ?? " "\n              let isDev: Bool = arg?["isDev"] as? Bool ?? true\n              let externalID: String? = arg?["externalID"] as? String\n              let isAddress: Bool = arg?["splitFlowTypeAddress"] as? Bool ?? true\n\n              switch call.method {\n                  case "startKyc":\n                      let callback = try? GlobalPassSDK.setupScreening(environment: isDev ? .dev : .prod, screeningToken: token)\n                      if let globalPassController = GlobalPassSDK.startScreening(externalID: externalID) {\n                          globalPassController.modalPresentationStyle = .overFullScreen\n                          controller.present(globalPassController, animated: true)\n                          result(true)\n                      }\n                  case "startBiometrics":\n                      let callback = try? GlobalPassSDK.setupInstant(environment: isDev ? .dev : .prod, instantBiometricsId: token)\n                      if let globalPassController = GlobalPassSDK.startInstant() {\n                          globalPassController.modalPresentationStyle = .overFullScreen\n                          controller.present(globalPassController, animated: true)\n                          result(true)\n                      }\n                  case "splitScreening":\n                      let callback = try? GlobalPassSDK.setupScreening(environment: isDev ? .dev : .prod, screeningToken: token)\n                      if let globalPassController = GlobalPassSDK.startSplitScreening(type: isAddress ? .address : .identity, externalID: externalID) {\n                          globalPassController.modalPresentationStyle = .overFullScreen\n                          controller.present(globalPassController, animated: true)\n                          result(true)\n                      }\n                  default:\n                      result(FlutterMethodNotImplemented)\n              }\n          }\n      GeneratedPluginRegistrant.register(with: self)\n      return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n}\n')),(0,r.kt)("h2",{id:"flutter-side"},"Flutter side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="KycPlatformInterface"',title:'"KycPlatformInterface"'},"abstract class KycPlatformInterface {\n  KycPlatformInterface();\n\n  @visibleForTesting\n  static const MethodChannel methodChannel =\n      MethodChannel('global_pass_plugin/kyc_channel');\n\n  MethodChannel get channel => methodChannel;\n\n  Future<void> startKyc({\n    required String token,\n    required bool isDev,\n  }) {\n    throw UnimplementedError('startKyc() has not been implemented.');\n  }\n\n  Future<void> startSplitKyc({\n    required String token,\n    required bool isDev,\n    required bool isAddress\n  }) {\n    throw UnimplementedError('startSplitKyc() has not been implemented.');\n  }\n\n  Future<void> startBiometrics({\n    required String token,\n    required bool isDev,\n  }) {\n    throw UnimplementedError('startBiometrics() has not been implemented.');\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="KycPlatformImpl"',title:'"KycPlatformImpl"'},"class KycPlatformImpl extends KycPlatformInterface {\n  @override\n  Future<void> startKyc({\n    required String token,\n    required bool isDev,\n  }) async {\n    await channel.invokeMethod<bool>(\n      'startKyc',\n      <String, dynamic>{\n        'token': token,\n        'isDev': isDev,\n      },\n    );\n  }\n\n  @override\n  Future<void> startSplitKyc({\n    required String token,\n    required bool isDev,\n    required bool isAddress\n  }) async {\n    await channel.invokeMethod<bool>(\n      'startKyc',\n      <String, dynamic>{\n        'token': token,\n        'isDev': isDev,\n        'isAddress': isAddress\n      },\n    );\n  }\n\n  @override\n  Future<void> startBiometrics({\n    required String token,\n    required bool isDev,\n  }) async {\n    await channel.invokeMethod<bool>(\n      'startBiometrics',\n      <String, dynamic>{\n        'token': token,\n        'isDev': isDev,\n      },\n    );\n  }\n}\n")),(0,r.kt)("p",null,"Now you can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"startKyc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"startBiometrics")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"startSplitKyc")," methods for further work."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"      case States.readyToKYC:\n        switch (isDevEnvironment) {\n          case true:\n            appLocator\n                .get<KycPlatformInterface>()\n                .startKyc(\n                  token: screeningToken ?? '',\n                  isDev: isDevEnvironment,\n                )\n                .then((\n              response,\n            ) {\n              resetAll();\n            }).catchError((error) {});\n            break;\n          case false:\n            appLocator\n                .get<KycPlatformInterface>()\n                .startKyc(\n                  token: screeningToken ?? '',\n                  isDev: !isDevEnvironment,\n                )\n                .then((response) {\n              resetAll();\n            }).catchError((error) {});\n            break;\n        }\n        break;\n      case States.readyToSplitKYC:\n        switch (isDevEnvironment) {\n          case true:\n            appLocator\n                .get<KycPlatformInterface>()\n                .startSplitKyc(\n                  token: screeningToken ?? '',\n                  isDev: isDevEnvironment,\n                  isAddress: isAddress,\n                )\n                .then((\n              response,\n            ) {\n              resetAll();\n            }).catchError((error) {});\n            break;\n          case false:\n            appLocator\n                .get<KycPlatformInterface>()\n                .startSplitKyc(\n                  token: screeningToken ?? '',\n                  isDev: !isDevEnvironment,\n                  isAddress: isAddress,\n                )\n                .then((response) {\n              resetAll();\n            }).catchError((error) {});\n            break;\n        }\n        break;\n      case States.readyToIB:\n        switch (isDevEnvironment) {\n          case true:\n            appLocator\n                .get<KycPlatformInterface>()\n                .startBiometrics(\n                  token: biometricsId ?? '',\n                  isDev: isDevEnvironment,\n                )\n                .then((response) {\n              resetAll();\n            }).catchError((error) {});\n            break;\n          case false:\n            appLocator\n                .get<KycPlatformInterface>()\n                .startBiometrics(\n                  token: biometricsId ?? '',\n                  isDev: !isDevEnvironment,\n                )\n                .then((response) {\n              resetAll();\n            }).catchError((error) {});\n            break;\n        }\n        break;\n")),(0,r.kt)("h2",{id:"localisation"},"Localisation"),(0,r.kt)("p",null,"To specify the required SDK display language, provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"localeIdentifier")," parameter with a string value containing the locale identifier in the function call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let callback = try? GlobalPassSDK.setupScreening(environment: isDev ? .dev : .prod, screeningToken: token, localeIdentifier: "en")\nif let globalPassController = GlobalPassSDK.startSplitScreening(type: isAddress ? .address : .identity, externalID: externalID) {\n    globalPassController.modalPresentationStyle = .overFullScreen\n    controller.present(globalPassController, animated: true)\n    result(true)\n}\n')),(0,r.kt)("p",null,"Available locales:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"English (",(0,r.kt)("inlineCode",{parentName:"li"},"en"),")"),(0,r.kt)("li",{parentName:"ul"},"German (",(0,r.kt)("inlineCode",{parentName:"li"},"de"),")"),(0,r.kt)("li",{parentName:"ul"},"Russian (",(0,r.kt)("inlineCode",{parentName:"li"},"ru"),")"),(0,r.kt)("li",{parentName:"ul"},"Chinese Simplified (",(0,r.kt)("inlineCode",{parentName:"li"},"zh-CN"),")"),(0,r.kt)("li",{parentName:"ul"},"Lithuanian (",(0,r.kt)("inlineCode",{parentName:"li"},"lt"),")")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If an unsupported locale will be provided, the SDK will fallback to English.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"localeIdentifier")," parameter is defined for static builders. Use the method without this parameter to use the default English localisation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"GlobalPassSDK.setupScreening(environment:screeningToken:) // Default English\nGlobalPassSDK.setupScreening(environment:screeningToken:localeIdentifier:) // Provided Localisation\nGlobalPassSDK.setupInstant(environment:instantBiometricsId:) // Default English\nGlobalPassSDK.setupInstant(environment:instantBiometricsId:localeIdentifier:) // Provided Localisation\n")))}u.isMDXComponent=!0}}]);