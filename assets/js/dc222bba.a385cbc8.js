"use strict";(self.webpackChunkglobalpass_docs=self.webpackChunkglobalpass_docs||[]).push([[194],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||l;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const l={hide_table_of_contents:!0},o="Flutter",i={unversionedId:"android-sdk/flutter",id:"android-sdk/flutter",title:"Flutter",description:"Latest GlobalPass Android SDK version: 1.2.17",source:"@site/docs/android-sdk/flutter.md",sourceDirName:"android-sdk",slug:"/android-sdk/flutter",permalink:"/android-sdk/flutter",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"androidSdkSidebar",previous:{title:"Android",permalink:"/category/android"},next:{title:"Native",permalink:"/android-sdk/native"}},s={},d=[{value:"1. Connect GlobalPass SDK",id:"1-connect-globalpass-sdk",level:2},{value:"a. Add this code to the Project level <em>build.gradle</em> file under <code>allprojects -&gt; repositories</code> section:",id:"a-add-this-code-to-the-project-level-buildgradle-file-under-allprojects---repositories-section",level:3},{value:"b. Add this code to the App level <em>build.gradle</em> file under <code>dependencies</code>:",id:"b-add-this-code-to-the-app-level-buildgradle-file-under-dependencies",level:3},{value:"c. Sync gradle",id:"c-sync-gradle",level:3},{value:"2. Android",id:"2-android",level:2},{value:"3. Flutter",id:"3-flutter",level:2},{value:"4. Start KYC or Instant Biometrics flow:",id:"4-start-kyc-or-instant-biometrics-flow",level:2},{value:"5. Additional optional parameters in <code>start()</code> function:",id:"5-additional-optional-parameters-in-start-function",level:2},{value:"<code>enableFileLogger</code>",id:"enablefilelogger",level:3},{value:"<code>widgetMode</code>",id:"widgetmode",level:3},{value:"<code>externalId</code>",id:"externalid",level:3},{value:"<code>languageCode</code>",id:"languagecode",level:3}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flutter"},"Flutter"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Latest GlobalPass Android SDK version: ",(0,r.kt)("strong",{parentName:"p"},"1.2.17"))),(0,r.kt)("h2",{id:"1-connect-globalpass-sdk"},"1. Connect GlobalPass SDK"),(0,r.kt)("h3",{id:"a-add-this-code-to-the-project-level-buildgradle-file-under-allprojects---repositories-section"},"a. Add this code to the Project level ",(0,r.kt)("em",{parentName:"h3"},"build.gradle")," file under ",(0,r.kt)("inlineCode",{parentName:"h3"},"allprojects -> repositories")," section:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle",metastring:'title="build.gradle"',title:'"build.gradle"'},"/* GlobalPass SDK Maven Repository */\nmaven {\n    url 'https://pkgs.dev.azure.com/isun-ag/GlobalPassApp-Public/_packaging/GlobalPassAndroidSDK/maven/v1'\n}\n\n/* FaceTec SDK Maven Private Repository */\nmaven {\n    url 'https://pkgs.dev.azure.com/isun-ag/GlobalPassApp/_packaging/facetecandroid/maven/v1'\n    name 'facetecandroid'\n    credentials {\n        username \"isun-ag\"\n        password \"<token>\"\n    }\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To get a <token",">"," value used above, please contact ",(0,r.kt)("strong",{parentName:"p"},"GlobalPass")," support.")),(0,r.kt)("h3",{id:"b-add-this-code-to-the-app-level-buildgradle-file-under-dependencies"},"b. Add this code to the App level ",(0,r.kt)("em",{parentName:"h3"},"build.gradle")," file under ",(0,r.kt)("inlineCode",{parentName:"h3"},"dependencies"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle",metastring:'title="build.gradle"',title:'"build.gradle"'},"implementation 'ch.globalpass.sdk:release:1.2.17'\n")),(0,r.kt)("h3",{id:"c-sync-gradle"},"c. Sync gradle"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you use ",(0,r.kt)("strong",{parentName:"p"},"ProGuard")," in your project you should include these rules:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"-keep class ch.globalpass.globalpasssdk.domain.model.** { *;}\n-keep class ch.globalpass.globalpasssdk.data.networkmodels.** {*;}\n\n-keep class org.jmrtd.** {*;}\n-keep class net.sf.scuba.** {*;}\n-keep class org.bouncycastle.** {*;}\n-keep class org.spongycastle.** {*;}\n-keep class org.ejbca.** {*;}\n\n-dontwarn javax.annotation.Nullable\n-dontwarn com.facetec.sdk.**\n-keep class com.facetec.sdk.**\n{ *; }\n"))),(0,r.kt)("h2",{id:"2-android"},"2. Android"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MainActivity: FlutterActivity() {\n    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {\n        super.configureFlutterEngine(flutterEngine)\n\n        MethodChannel(\n                flutterEngine.dartExecutor.binaryMessenger ,\n                "global_pass_plugin/kyc_channel"\n        ).setMethodCallHandler{call , result->\nval args = call.arguments as? Map<*,*>\n            val token : String = args?.get("token") as? String ?: " "\n            val isDev : Boolean = args?.get("isDev") as? Boolean ?: true\n            when (call.method) {\n                "startKyc" -> {\n                    GlobalPassSDK.create(this).start(\n                            token = token,\n                            activity = MainActivity::class.java,\n                            environment = if (isDev) GlobalPassEnvironment.Dev\n                                          else GlobalPassEnvironment.Prod,\n                    )\n                    result.success(true)\n                }\n                else -> {\n                    result.notImplemented()\n                }\n            }\n            when (call.method) {\n                "startBiometrics" -> {\n                    GlobalPassSDK.create(this).start(\n                            token = token,\n                            activity = MainActivity::class.java,\n                            environment = if (isDev) GlobalPassEnvironment.Dev\n                                        else GlobalPassEnvironment.Prod,\n                            flow = GlobalPassFlow.InstantBiometrics\n                    )\n                    result.success(true)\n                }\n                else -> {\n                    result.notImplemented()\n                }\n            }\n        }\n\n    }\n}\n')),(0,r.kt)("h2",{id:"3-flutter"},"3. Flutter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="KycPlatformInterface"',title:'"KycPlatformInterface"'},"abstract class KycPlatformInterface {\n  KycPlatformInterface();\n\n  @visibleForTesting\n  static const MethodChannelmethodChannel=\n      MethodChannel('global_pass_plugin/kyc_channel');\n\n  MethodChannel get channel =>methodChannel;\n\n  Future<void> startKyc({\n    required String token,\n    required bool isDev,\n  }) {\n    throw UnimplementedError('startKyc() has not been implemented.');\n  }\n\n  Future<void> startBiometrics({\n    required String token,\n    required bool isDev,\n  }) {\n    throw UnimplementedError('startBiometrics() has not been implemented.');\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="KycPlatformImpl"',title:'"KycPlatformImpl"'},"class KycPlatformImpl extends KycPlatformInterface {\n  @override\n  Future<void> startKyc({\n    required String token,\n    required bool isDev,\n  }) async {\n    await channel.invokeMethod<bool>(\n      'startKyc',\n      <String, dynamic>{\n        'token': token,\n        'isDev': isDev,\n      },\n    );\n  }\n\n  @override\n  Future<void> startBiometrics({\n    required String token,\n    required bool isDev,\n  }) async {\n    await channel.invokeMethod<bool>(\n      'startBiometrics',\n      <String, dynamic>{\n        'token': token,\n        'isDev': isDev,\n      },\n    );\n  }\n}\n")),(0,r.kt)("h2",{id:"4-start-kyc-or-instant-biometrics-flow"},"4. Start KYC or Instant Biometrics flow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"case States.readyToKYC:\n    switch (isDevEnvironment) {\n      case true:\n        appLocator\n            .get<KycPlatformInterface>()\n            .startKyc(\n              token: screeningToken ?? '',\n              isDev: isDevEnvironment,\n            )\n            .then((\n          response,\n        ) {\n          resetAll();\n        }).catchError((error) {});\n        break;\n      case false:\n        appLocator\n            .get<KycPlatformInterface>()\n            .startKyc(\n              token: screeningToken ?? '',\n              isDev: !isDevEnvironment,\n            )\n            .then((response) {\n          resetAll();\n        }).catchError((error) {});\n        break;\n    }\n    break;\n  case States.readyToIB:\n    switch (isDevEnvironment) {\n      case true:\n        appLocator\n            .get<KycPlatformInterface>()\n            .startBiometrics(\n              token: biometricsId ?? '',\n              isDev: isDevEnvironment,\n            )\n            .then((response) {\n          resetAll();\n        }).catchError((error) {});\n        break;\n      case false:\n        appLocator\n            .get<KycPlatformInterface>()\n            .startBiometrics(\n              token: biometricsId ?? '',\n              isDev: !isDevEnvironment,\n            )\n            .then((response) {\n          resetAll();\n        }).catchError((error) {});\n        break;\n    }\n    break;\n}\n")),(0,r.kt)("h2",{id:"5-additional-optional-parameters-in-start-function"},"5. Additional optional parameters in ",(0,r.kt)("inlineCode",{parentName:"h2"},"start()")," function:"),(0,r.kt)("p",null,"There are additional optional parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"start()")," function:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enableFileLogger"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable Logger to write SDK logs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"widgetMode"),(0,r.kt)("td",{parentName:"tr",align:null},"Select matching widget mode if ",(0,r.kt)("inlineCode",{parentName:"td"},"Split")," flow is used.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"externalId"),(0,r.kt)("td",{parentName:"tr",align:null},"Specify your internal customer identifier to be set on the screening.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"languageCode"),(0,r.kt)("td",{parentName:"tr",align:null},"Specify SDK language using available langauage options.")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'globalPassSdk.start(\n    // ...\n    enableFileLogger = true,\n    widgetMode: WidgetMode = WidgetMode.FULL_MODE,\n    externalId: String? = null,\n    languageCode: String = "en"\n)\n')),(0,r.kt)("h3",{id:"enablefilelogger"},(0,r.kt)("inlineCode",{parentName:"h3"},"enableFileLogger")),(0,r.kt)("p",null,"There is an optional Logger that writes logs into file which could be found in Internal Storage:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"File Storage \u2192 Android \u2192 data \u2192 \u201cyour app package\u201d \u2192 files \u2192 logs \u2192 logs file")),(0,r.kt)("p",null,"It is optional and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," by default. To enable the logger you need to set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("h3",{id:"widgetmode"},(0,r.kt)("inlineCode",{parentName:"h3"},"widgetMode")),(0,r.kt)("p",null,"To use ",(0,r.kt)("strong",{parentName:"p"},"Split")," flow, matching widgetMode must be selected. By default it is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"FULL_MODE"),". To select mode you can use sealed class WidgetMode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'enum class WidgetMode(val value: String?) {\n    SPLIT_IDENTITY_MODE(value = "Identity"),\n    SPLIT_ADDRESS_MODE(value = "Address"),\n    FULL_MODE(value = null)\n}\n')),(0,r.kt)("h3",{id:"externalid"},(0,r.kt)("inlineCode",{parentName:"h3"},"externalId")),(0,r.kt)("p",null,"You can provide your own customer ID to be assigned to the screening flow. By default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("h3",{id:"languagecode"},(0,r.kt)("inlineCode",{parentName:"h3"},"languageCode")),(0,r.kt)("p",null,"By default, the SDK is displayed in English. To specify a different SDK display language, you can provide the locale code here."),(0,r.kt)("p",null,"Available locales:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"English (",(0,r.kt)("inlineCode",{parentName:"li"},"en"),")"),(0,r.kt)("li",{parentName:"ul"},"German (",(0,r.kt)("inlineCode",{parentName:"li"},"de"),")"),(0,r.kt)("li",{parentName:"ul"},"Russian (",(0,r.kt)("inlineCode",{parentName:"li"},"ru"),")"),(0,r.kt)("li",{parentName:"ul"},"Chinese Simplified (",(0,r.kt)("inlineCode",{parentName:"li"},"zh-CN"),")"),(0,r.kt)("li",{parentName:"ul"},"Lithuanian (",(0,r.kt)("inlineCode",{parentName:"li"},"lt"),")")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If an unsupported locale will be provided, the SDK will fallback to English.")))}u.isMDXComponent=!0}}]);