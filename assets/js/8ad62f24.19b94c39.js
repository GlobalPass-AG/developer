"use strict";(self.webpackChunkglobalpass_docs=self.webpackChunkglobalpass_docs||[]).push([[770],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,g=p["".concat(d,".").concat(m)]||p[m]||u[m]||l;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=m;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r[p]="string"==typeof e?e:i,o[1]=r;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const l={hide_table_of_contents:!0},o="React Native",r={unversionedId:"android-sdk/react-native/react-native",id:"android-sdk/react-native/react-native",title:"React Native",description:"Latest GlobalPass Android SDK version: 1.2.17",source:"@site/docs/android-sdk/react-native/react-native.md",sourceDirName:"android-sdk/react-native",slug:"/android-sdk/react-native/",permalink:"/android-sdk/react-native/",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"androidSdkSidebar",previous:{title:"Native",permalink:"/android-sdk/native"}},d={},c=[{value:"1. Connect GlobalPass SDK",id:"1-connect-globalpass-sdk",level:2},{value:"a. Add this code to the Project level <em>build.gradle</em> file under <code>allprojects -&gt; repositories</code> section:",id:"a-add-this-code-to-the-project-level-buildgradle-file-under-allprojects---repositories-section",level:3},{value:"b. Add this code to the App level <em>build.gradle</em> file under <code>dependencies</code>:",id:"b-add-this-code-to-the-app-level-buildgradle-file-under-dependencies",level:3},{value:"c. Sync gradle",id:"c-sync-gradle",level:3},{value:"2. Create Native module to communicate with React Native",id:"2-create-native-module-to-communicate-with-react-native",level:2},{value:"a. Create interface with functions you need in your module e.g.:",id:"a-create-interface-with-functions-you-need-in-your-module-eg",level:3},{value:"b. Create an implementation of your interface. Also you need to extend",id:"b-create-an-implementation-of-your-interface-also-you-need-to-extend",level:3},{value:"c. Implement ReactPackage interface:",id:"c-implement-reactpackage-interface",level:3},{value:"d. Add your Package class to MainApplication.java -&gt; getPackages()",id:"d-add-your-package-class-to-mainapplicationjava---getpackages",level:3},{value:"3. Connect your module with React Native:",id:"3-connect-your-module-with-react-native",level:2},{value:"4. Start KYC flow",id:"4-start-kyc-flow",level:2},{value:"5. Start Instant Biometrics flow",id:"5-start-instant-biometrics-flow",level:2},{value:"6. Additional optional parameters in <code>start()</code> function:",id:"6-additional-optional-parameters-in-start-function",level:2},{value:"<code>enableFileLogger</code>",id:"enablefilelogger",level:3},{value:"<code>widgetMode</code>",id:"widgetmode",level:3},{value:"<code>externalId</code>",id:"externalid",level:3},{value:"<code>languageCode</code>",id:"languagecode",level:3}],s={toc:c},p="wrapper";function u(e){let{components:t,...l}=e;return(0,i.kt)(p,(0,a.Z)({},s,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"react-native"},"React Native"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Latest GlobalPass Android SDK version: ",(0,i.kt)("strong",{parentName:"p"},"1.2.17"))),(0,i.kt)("h2",{id:"1-connect-globalpass-sdk"},"1. Connect GlobalPass SDK"),(0,i.kt)("h3",{id:"a-add-this-code-to-the-project-level-buildgradle-file-under-allprojects---repositories-section"},"a. Add this code to the Project level ",(0,i.kt)("em",{parentName:"h3"},"build.gradle")," file under ",(0,i.kt)("inlineCode",{parentName:"h3"},"allprojects -> repositories")," section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle",metastring:'title="build.gradle"',title:'"build.gradle"'},"/* GlobalPass SDK Maven Repository */\nmaven {\n    url 'https://pkgs.dev.azure.com/isun-ag/GlobalPassApp-Public/_packaging/GlobalPassAndroidSDK/maven/v1'\n}\n\n/* FaceTec SDK Maven Private Repository */\nmaven {\n    url 'https://pkgs.dev.azure.com/isun-ag/GlobalPassApp/_packaging/facetecandroid/maven/v1'\n    name 'facetecandroid'\n    credentials {\n        username \"isun-ag\"\n        password \"<token>\"\n    }\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To get a <token",">"," value used above, please contact ",(0,i.kt)("strong",{parentName:"p"},"GlobalPass")," support.")),(0,i.kt)("h3",{id:"b-add-this-code-to-the-app-level-buildgradle-file-under-dependencies"},"b. Add this code to the App level ",(0,i.kt)("em",{parentName:"h3"},"build.gradle")," file under ",(0,i.kt)("inlineCode",{parentName:"h3"},"dependencies"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle",metastring:'title="build.gradle"',title:'"build.gradle"'},"implementation 'ch.globalpass.sdk:release:1.2.17'\n")),(0,i.kt)("h3",{id:"c-sync-gradle"},"c. Sync gradle"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you use ",(0,i.kt)("strong",{parentName:"p"},"ProGuard")," in your project you should include these rules:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"-keep class ch.globalpass.globalpasssdk.domain.model.** { *;}\n-keep class ch.globalpass.globalpasssdk.data.networkmodels.** {*;}\n\n-keep class org.jmrtd.** {*;}\n-keep class net.sf.scuba.** {*;}\n-keep class org.bouncycastle.** {*;}\n-keep class org.spongycastle.** {*;}\n-keep class org.ejbca.** {*;}\n\n-dontwarn javax.annotation.Nullable\n-dontwarn com.facetec.sdk.**\n-keep class com.facetec.sdk.**\n{ *; }\n"))),(0,i.kt)("h2",{id:"2-create-native-module-to-communicate-with-react-native"},"2. Create Native module to communicate with React Native"),(0,i.kt)("p",null,"Official documentation: ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/native-modules-android#module-name"},"https://reactnative.dev/docs/native-modules-android#module-name")),(0,i.kt)("h3",{id:"a-create-interface-with-functions-you-need-in-your-module-eg"},"a. Create interface with functions you need in your module e.g.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface GPFacade {\n\n  @ReactMethod\n  fun buildKYCProd(token: String, promise: Promise)\n\n  @ReactMethod\n  fun buildKYCDev(token: String, promise: Promise)\n\n  @ReactMethod\n  fun buildIBProd(token: String, promise: Promise)\n\n  @ReactMethod\n  fun buildIBDev(token: String, promise: Promise)\n\n}\n")),(0,i.kt)("h3",{id:"b-create-an-implementation-of-your-interface-also-you-need-to-extend"},"b. Create an implementation of your interface. Also you need to extend"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class GlobalPassSDKManager(\n    reactContext: ReactApplicationContext,\n) : ReactContextBaseJavaModule(reactContext), GPFacade {\n\n    @ReactMethod\n    override fun buildKYCProd(token: String, promise: Promise) {\n        try {\n            GlobalPassSDK\n                .create(requireNotNull(currentActivity))\n                .start(\n                    token = token,\n                    activity = currentActivity!!::class.java,\n                    environment = GlobalPassEnvironment.Prod\n                )\n\n            promise.resolve(token)\n        } catch (e: Exception) {\n            promise.reject(e)\n        }\n    }\n\n    @ReactMethod\n    override fun buildKYCDev(token: String, promise: Promise) {\n        try {\n            GlobalPassSDK\n                .create(requireNotNull(currentActivity))\n                .start(\n                    token = token,\n                    activity = currentActivity!!::class.java,\n                    environment = GlobalPassEnvironment.Dev\n                )\n            promise.resolve(token)\n        } catch (e: Exception) {\n            promise.reject(e)\n        }\n    }\n\n    override fun buildIBProd(biometricsId: String, promise: Promise) {\n        try {\n            GlobalPassSDK\n                .create(requireNotNull(currentActivity))\n                .start(\n                    token = biometricsId,\n                    activity = currentActivity!!::class.java,\n                    environment = GlobalPassEnvironment.Prod,\n                    flow = GlobalPassFlow.InstantBiometrics\n                )\n            promise.resolve(biometricsId)\n        } catch (e: Exception) {\n            promise.reject(e)\n        }\n    }\n\n    override fun buildIBDev(biometricsId: String, promise: Promise) {\n        try {\n            GlobalPassSDK\n                .create(requireNotNull(currentActivity))\n                .start(\n                    token = biometricsId,\n                    activity = currentActivity!!::class.java,\n                    environment = GlobalPassEnvironment.Dev,\n                    flow = GlobalPassFlow.InstantBiometrics\n                )\n            promise.resolve(biometricsId)\n        } catch (e: Exception) {\n            promise.reject(e)\n        }\n    }\n\n    override fun getName(): String = "GPFacade"\n}\n')),(0,i.kt)("h3",{id:"c-implement-reactpackage-interface"},"c. Implement ReactPackage interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class GlobalPassPackage implements ReactPackage {\n\n @NonNull\n @Override\n public List<ViewManager> createViewManagers(@NonNull ReactApplicationContext reactContext) {\n     return Collections.emptyList();\n }\n\n @NonNull\n @Override\n public List<NativeModule> createNativeModules(\n         @NonNull ReactApplicationContext reactContext) {\n     List<NativeModule> modules = new ArrayList<>();\n     modules.add(new GlobalPassSDKManager(reactContext));\n     return modules;\n }\n}\n")),(0,i.kt)("h3",{id:"d-add-your-package-class-to-mainapplicationjava---getpackages"},"d. Add your Package class to MainApplication.java -> getPackages()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"packages.add(new GlobalPassPackage ());\n")),(0,i.kt)("h2",{id:"3-connect-your-module-with-react-native"},"3. Connect your module with React Native:"),(0,i.kt)("p",null,"Define in App.js your modules:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"NativeModules",src:n(5939).Z,width:"628",height:"317"})),(0,i.kt)("h2",{id:"4-start-kyc-flow"},"4. Start KYC flow"),(0,i.kt)("p",null,"You can start KYC process by calling one of the functions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"GPFacade.buildKYCDev(screeningToken);\nGPFacade.buildKYCProd(screeningToken);\n")),(0,i.kt)("h2",{id:"5-start-instant-biometrics-flow"},"5. Start Instant Biometrics flow"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"GPFacade.buildIBProd(screeningToken);\nGPFacade.buildIBDev(screeningToken);\n")),(0,i.kt)("h2",{id:"6-additional-optional-parameters-in-start-function"},"6. Additional optional parameters in ",(0,i.kt)("inlineCode",{parentName:"h2"},"start()")," function:"),(0,i.kt)("p",null,"There are additional optional parameters in ",(0,i.kt)("inlineCode",{parentName:"p"},"start()")," function:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"enableFileLogger"),(0,i.kt)("td",{parentName:"tr",align:null},"Enable Logger to write SDK logs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"widgetMode"),(0,i.kt)("td",{parentName:"tr",align:null},"Select matching widget mode if ",(0,i.kt)("inlineCode",{parentName:"td"},"Split")," flow is used.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"externalId"),(0,i.kt)("td",{parentName:"tr",align:null},"Specify your internal customer identifier to be set on the screening.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"languageCode"),(0,i.kt)("td",{parentName:"tr",align:null},"Specify SDK language using available langauage options.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'globalPassSdk.start(\n    // ...\n    enableFileLogger = true,\n    widgetMode: WidgetMode = WidgetMode.FULL_MODE,\n    externalId: String? = null,\n    languageCode: String = "en"\n)\n')),(0,i.kt)("h3",{id:"enablefilelogger"},(0,i.kt)("inlineCode",{parentName:"h3"},"enableFileLogger")),(0,i.kt)("p",null,"There is an optional Logger that writes logs into file which could be found in Internal Storage:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"File Storage \u2192 Android \u2192 data \u2192 \u201cyour app package\u201d \u2192 files \u2192 logs \u2192 logs file")),(0,i.kt)("p",null,"It is optional and ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," by default. To enable the logger you need to set it to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("h3",{id:"widgetmode"},(0,i.kt)("inlineCode",{parentName:"h3"},"widgetMode")),(0,i.kt)("p",null,"To use ",(0,i.kt)("strong",{parentName:"p"},"Split")," flow, matching widgetMode must be selected. By default it is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"FULL_MODE"),". To select mode you can use sealed class WidgetMode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'enum class WidgetMode(val value: String?) {\n    SPLIT_IDENTITY_MODE(value = "Identity"),\n    SPLIT_ADDRESS_MODE(value = "Address"),\n    FULL_MODE(value = null)\n}\n')),(0,i.kt)("h3",{id:"externalid"},(0,i.kt)("inlineCode",{parentName:"h3"},"externalId")),(0,i.kt)("p",null,"You can provide your own customer ID to be assigned to the screening flow. By default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("h3",{id:"languagecode"},(0,i.kt)("inlineCode",{parentName:"h3"},"languageCode")),(0,i.kt)("p",null,"By default, the SDK is displayed in English. To specify a different SDK display language, you can provide the locale code here."),(0,i.kt)("p",null,"Available locales:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"English (",(0,i.kt)("inlineCode",{parentName:"li"},"en"),")"),(0,i.kt)("li",{parentName:"ul"},"German (",(0,i.kt)("inlineCode",{parentName:"li"},"de"),")"),(0,i.kt)("li",{parentName:"ul"},"Russian (",(0,i.kt)("inlineCode",{parentName:"li"},"ru"),")"),(0,i.kt)("li",{parentName:"ul"},"Chinese Simplified (",(0,i.kt)("inlineCode",{parentName:"li"},"zh-CN"),")"),(0,i.kt)("li",{parentName:"ul"},"Lithuanian (",(0,i.kt)("inlineCode",{parentName:"li"},"lt"),")")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If an unsupported locale will be provided, the SDK will fallback to English.")))}u.isMDXComponent=!0},5939:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/native-modules-3014489ac7dd3c595d56f0d2eb4b6a0c.png"}}]);