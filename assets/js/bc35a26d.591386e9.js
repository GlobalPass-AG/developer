"use strict";(self.webpackChunkglobalpass_docs=self.webpackChunkglobalpass_docs||[]).push([[656],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>k});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return t?a.createElement(k,r(r({ref:n},c),{},{components:t})):a.createElement(k,r({ref:n},c))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const l={hide_table_of_contents:!0},r="Native",o={unversionedId:"ios-sdk/native/native",id:"ios-sdk/native/native",title:"Native",description:"Latest GlobalPass iOS SDK version: 1.11",source:"@site/docs/ios-sdk/native/native.md",sourceDirName:"ios-sdk/native",slug:"/ios-sdk/native/",permalink:"/ios-sdk/native/",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"iosSdkSidebar",previous:{title:"Flutter",permalink:"/ios-sdk/flutter"},next:{title:"React Native",permalink:"/ios-sdk/react-native/"}},s={},p=[{value:"1. CocoaPods installation step-by-step",id:"1-cocoapods-installation-step-by-step",level:2},{value:"a. Edit Podfile",id:"a-edit-podfile",level:3},{value:"b. Install Cocoa Pods in Terminal",id:"b-install-cocoa-pods-in-terminal",level:3},{value:"2. Project setup",id:"2-project-setup",level:2},{value:"Paste the following lines to <code>Info.plist</code>",id:"paste-the-following-lines-to-infoplist",level:3},{value:"3. Usage",id:"3-usage",level:2},{value:"Regular flow",id:"regular-flow",level:3},{value:"Split flow",id:"split-flow",level:3},{value:"Instant Biometrics flow",id:"instant-biometrics-flow",level:3},{value:"4. Localisation",id:"4-localisation",level:2}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"native"},"Native"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Latest GlobalPass iOS SDK version: ",(0,i.kt)("strong",{parentName:"p"},"1.11"))),(0,i.kt)("h2",{id:"1-cocoapods-installation-step-by-step"},"1. CocoaPods installation step-by-step"),(0,i.kt)("h3",{id:"a-edit-podfile"},"a. Edit Podfile"),(0,i.kt)("p",null,"Add plugin to the beginning of Podfile:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"plugin 'cocoapods-azure-universal-packages', {\n  :organization => 'https://dev.azure.com/isun-ag'\n}\n")),(0,i.kt)("p",null,"Provide ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," urls:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"source 'https://cdn.cocoapods.org'\nsource 'https://dev.azure.com/isun-ag/GlobalPassApp-Public/_git/GlobalPassApp-sdk-ios-private-specs'\n")),(0,i.kt)("p",null,"and required dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"pod 'GlobalPass', '~> 1.11'\npod 'FaceTecSDK', :http => 'https://dev.azure.com/isun-ag/368936e7-5cb5-4092-96c5-fe9942e2c3e1/_apis/packaging/feeds/FaceTecSDK/upack/packages/facetecsdk/versions/0.0.2'\n")),(0,i.kt)("h3",{id:"b-install-cocoa-pods-in-terminal"},"b. Install Cocoa Pods in Terminal"),(0,i.kt)("p",null,"Run the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ brew update && brew install azure-cli\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ az devops login\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"When asked for credentials, put the ",(0,i.kt)("strong",{parentName:"p"},"repository access token")," you were provided by GlobalPass.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ gem install cocoapods-azure-universal-packages\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ pod install\n")),(0,i.kt)("h2",{id:"2-project-setup"},"2. Project setup"),(0,i.kt)("h3",{id:"paste-the-following-lines-to-infoplist"},"Paste the following lines to ",(0,i.kt)("inlineCode",{parentName:"h3"},"Info.plist")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="Info.plist"',title:'"Info.plist"'},"<key>NFCReaderUsageDescription</key>\n<string>Provide you description here</string>\n<key>NSCameraUsageDescription</key>\n<string>Provide you description here</string>\n<key>NSLocationWhenInUseUsageDescription</key>\n<string>Provide you description here</string>\n<key>com.apple.developer.nfc.readersession.iso7816.select-identifiers</key>\n<array>\n<string>A0000002471001</string>\n<string>A0000002472001</string>\n<string>00000000000000</string>\n</array>\n")),(0,i.kt)("admonition",{title:"important",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Please change the descriptions under ",(0,i.kt)("inlineCode",{parentName:"p"},"NFCReaderUsageDescription"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NSCameraUsageDescription")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"NSLocationWhenInUseUsageDescription")," in the file above. This is important to pass ",(0,i.kt)("strong",{parentName:"p"},"App Store")," review process for your application.")),(0,i.kt)("h2",{id:"3-usage"},"3. Usage"),(0,i.kt)("h3",{id:"regular-flow"},"Regular flow"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"do {\n    callback = try GlobalPassSDK.setupScreening(environment: environment, screeningToken: screeningToken)\n} catch {\n    print(error)\n}\nDispatchQueue.main.async {\n    guard let viewController = GlobalPassSDK.startScreening(externalID: nil) else {\n        return\n    }\n    viewController.modalPresentationStyle = .overFullScreen\n    self.present(viewController, animated: true, completion: nil)\n}\n")),(0,i.kt)("p",null,"Call to this method (",(0,i.kt)("inlineCode",{parentName:"p"},"setupScreening(environment:screeningToken:)"),") returns a closure. You should call it in order to make SDK know that you have finished a KYC flow. Pass to ",(0,i.kt)("inlineCode",{parentName:"p"},"externalID")," a string to associate it with the KYC session record or ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," to leave it empty."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"try GlobalPassSDK.setupScreening(\n    environment: environment,\n    screeningToken: screeningToken\n)\n")),(0,i.kt)("p",null,"Call to this method (",(0,i.kt)("inlineCode",{parentName:"p"},"startScreening(completion:)"),") returns an instance of\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"UIViewController"),". Completion you pass here is called when SDK finishes the KYC flow."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'GlobalPassSDK.startScreening(externalID: "some external id")\n')),(0,i.kt)("p",null,"You should present this controller over the\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"rootViewController"),"."),(0,i.kt)("p",null,"And that\u2019s it. After the KYC flow is passed SDK returns control to React Native part by dismissing its view controller and calling the callback you passed earlier."),(0,i.kt)("h3",{id:"split-flow"},"Split flow"),(0,i.kt)("p",null,"To start split screening instead of a regular one should call ",(0,i.kt)("inlineCode",{parentName:"p"},"startSplitScreening")," method passing there a type of a split process (",(0,i.kt)("inlineCode",{parentName:"p"},"identity")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),"). The rest of the steps are the same as in the case of the regular screening flow."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"do {\n    callback = try GlobalPassSDK.setupScreening(environment: environment, screeningToken: screeningToken)\n} catch {\n    print(error)\n}\nDispatchQueue.main.async {\n    guard let viewController = GlobalPassSDK.startSplitScreening(type: .address, externalID: nil) else {\n        return\n    }\n    viewController.modalPresentationStyle = .overFullScreen\n    self.present(viewController, animated: true, completion: nil)\n}\n")),(0,i.kt)("h3",{id:"instant-biometrics-flow"},"Instant Biometrics flow"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"do {\n    callback = try GlobalPassSDK.setupInstant(environment: environment, instantBiometricsId: instantBiometricsId)\n} catch {\n    print(error)\n}\nDispatchQueue.main.async {\n    guard let viewController = GlobalPassSDK.startInstant() else {\n        return\n    }\n    viewController.modalPresentationStyle = .overFullScreen\n    self.present(viewController, animated: true, completion: nil)\n}\n")),(0,i.kt)("p",null,"Call to this method (",(0,i.kt)("inlineCode",{parentName:"p"},"setupInstant(environment:instantBiometricsId:)"),") returns a closure. You should call it in order to make SDK know that you have finished a KYC flow."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"try GlobalPassSDK.setupInstant(\n    environment: environment,\n    instantBiometricsId: instantBiometricsId\n)\n")),(0,i.kt)("p",null,"Call to this method (",(0,i.kt)("inlineCode",{parentName:"p"},"startInstant(completion:)"),") returns an instance of\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"UIViewController"),". Completion you pass here is called when SDK finishes the KYC flow."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"GlobalPassSDK.startInstant(completion: { _, _ in callback?() })\n")),(0,i.kt)("p",null,"You should present this controller over the\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"rootViewController"),"."),(0,i.kt)("p",null,"And that\u2019s it. After the KYC flow is passed SDK dismisses its view controller and calls the callback you passed earlier."),(0,i.kt)("h2",{id:"4-localisation"},"4. Localisation"),(0,i.kt)("p",null,"To specify the required SDK display language, provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"localeIdentifier")," parameter with a string value containing the locale identifier in the function call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'do {\n    callback = try GlobalPassSDK.setupScreening(environment: environment, screeningToken: screeningToken, localeIdentifier: "en")\n} catch {\n    print(error)\n}\nDispatchQueue.main.async {\n    guard let viewController = GlobalPassSDK.startSplitScreening(type: .address, externalID: nil) else {\n        return\n    }\n    viewController.modalPresentationStyle = .overFullScreen\n    self.present(viewController, animated: true, completion: nil)\n}\n')),(0,i.kt)("p",null,"Available locales:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"English (",(0,i.kt)("inlineCode",{parentName:"li"},"en"),")"),(0,i.kt)("li",{parentName:"ul"},"German (",(0,i.kt)("inlineCode",{parentName:"li"},"de"),")"),(0,i.kt)("li",{parentName:"ul"},"Russian (",(0,i.kt)("inlineCode",{parentName:"li"},"ru"),")"),(0,i.kt)("li",{parentName:"ul"},"Chinese Simplified (",(0,i.kt)("inlineCode",{parentName:"li"},"zh-CN"),")"),(0,i.kt)("li",{parentName:"ul"},"Lithuanian (",(0,i.kt)("inlineCode",{parentName:"li"},"lt"),")")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If an unsupported locale will be provided, the SDK will fallback to English.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"localeIdentifier")," parameter is defined for static builders. Use the method without this parameter to use the default English localisation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"GlobalPassSDK.setupScreening(environment:screeningToken:) // Default English\nGlobalPassSDK.setupScreening(environment:screeningToken:localeIdentifier:) // Provided Localisation\nGlobalPassSDK.setupInstant(environment:instantBiometricsId:) // Default English\nGlobalPassSDK.setupInstant(environment:instantBiometricsId:localeIdentifier:) // Provided Localisation\n")))}u.isMDXComponent=!0}}]);